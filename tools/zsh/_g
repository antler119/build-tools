#compdef e

# For oh-my-zsh, install this in $ZSH/completions/ or ~/.oh-my-zsh/completions/
# (You may need to mkdir that completions/ directory.)
#
# If you're not using oh-my-zsh, you may need to add this to your ~/.zshrc:
# source /path/to/_g
# autoload -U compinit && compinit
#
# To force zsh to regenerate completions, you can `rm -f ~/.zcompdump`

declare -a __g_options=()
# call `cmd --help`, parse out the option names,
# and store in __g_options global
function __g_get_cmd_options() {
  local -a options=()
  "$@" --help | \
    awk '/^Options:/{flag=1;next}/^$/{flag=0}flag' | \
    sed 's/  /;/g' | cut -f2 -d';' | \
    sed 's/^-[a-zA-Z0-9], //g' | \
    cut -f1 -d' ' | \
    while read -r option; do
      options+=($option)
    done
  __g_options=($options[@])
}

declare -a __g_subcommands=()
# call `cmd --help`, parse out the command names,
# and store in __g_subcommands global
function __g_get_cmd_subcommands() {
  local -a subcommands=()
  "$@" --help | \
  awk '/^Commands:/{flag=1;next}/^$/{flag=0}flag' | \
  sed 's/  /;/g' | cut -f2 -d';' | \
  sed 's/|/\n/' | \
  cut -f1 -d' ' | \
  while read -r subcommand; do
    subcommands+=($subcommand)
  done
  __g_subcommands=("$subcommands[@]")
}

declare -a __g_configs=()
# call `e show configs`, parse out the config names,
# and store in __g_configs global
function __g_get_configs() {
  local -a configs=()
  e show configs | \
  sed 's/..//' | \
  sort | \
  while read -r configname; do
    configs+=($configname)
  done
  __g_configs=("$configs[@]")
}

declare -a __g_targets=()
# call `e build --list-targets`, parse out the target names,
# and store in __g_targets global
function __g_get_targets() {
  local -a targets=()
  e build --list-targets | \
  sort | \
  while read -r target; do
    targets+=($target)
  done
  __g_targets=("$targets[@]")
}

__g_get_cmd_subcommands e
__g_get_cmd_options e
declare line

_arguments -C \
  '1: :($__g_subcommands $__g_options)' \
  '*::arg:->args' \
&& ret=0

case $line[1] in
  (use)
    __g_get_configs
    _arguments -C \
      '1: :($__g_configs)' \
      '*::arg:->args' \
    && ret=0
  ;;

  (build|make)
    __g_get_targets
    __g_get_cmd_subcommands e $line[1]
    __g_get_cmd_options e $line[1]
    _arguments -C \
      '1: :("${__g_targets[@]}" $__g_subcommands $__g_options)' \
      '*::arg:->args' \
    && ret=0
  ;;

  # in 'e start' / 'e node',
  # try file completion on remaining args
  (start|run|node)
    _path_files \
    && ret=0
  ;;

  (*)
    __g_get_cmd_subcommands e $line[1]
    __g_get_cmd_options e $line[1]
    _arguments -C \
      '1: :($__g_subcommands $__g_options)' \
      '*::arg:->args' \
    && ret=0
  ;;
esac
